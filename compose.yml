services:
    api:
        build:
            context: .
            dockerfile: Dockerfile.api
        ports:
            - "8080:8080"
        environment:
            - MONGODB_URI=mongodb://mongodb:27017/?replicaSet=rs0&directConnection=true
        volumes:
            - .:/app
        networks:
            - internal
        healthcheck:
            test: curl --fail http://localhost:8080/health || exit 1
            interval: 10s
            start_period: 30s
        restart: on-failure
        depends_on:
            mongodb:
                condition: service_healthy

    canopy:
        build:
            context: canopy
            dockerfile: Dockerfile.dev
        ports:
            - "5173:5173"
        volumes:
            - ./canopy:/app
        networks:
            - internal
            - external

    mongodb:
        image: mongo:8.0.9
        command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
        ports:
            - "27017:27017"
        environment:
            MONGO_INITDB_DATABASE: overstory
        volumes:
            - mongo-data:/data/db
            - mongo-config:/data/configdb
        networks:
            - internal
            - external
        healthcheck:
            test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) }" | mongosh --port 27017 --quiet
            interval: 5s
            timeout: 30s
            start_period: 0s
            start_interval: 1s
            retries: 30
        restart: on-failure

networks:
    internal:
        driver: bridge
    external:
        driver: bridge

volumes:
    mongo-data:
    mongo-config:
